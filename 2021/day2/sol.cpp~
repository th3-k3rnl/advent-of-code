#include <io.h>

struct State {
  int depth = 0; // The number of units below the water level
  int disp  = 0; // Displacement in the forward direction
  int aim   = 0; // The magnitude of the aimed position of the submarine
};

enum Dir { forward, down, up };


State* part1(vector<string> inputs) {
  Dir dir;
  cout << forward;
  const string dirs[3] = { "forward", "down", "up" };
  State* state = new State();
  cout << dirs[0];

  return state;
}


void part2(vector<string> inputs, State* state) {
  string direction;

  for (unsigned int input = 0; input < inputs.size(); ++input) {
    if (input % 2 == 0) {
      direction = inputs.at(input);
    } else {
      if (direction == "forward") {
	state->disp = state->disp + stoi(inputs.at(input));
      } else {
	if (direction == "down") {
	  state->aim += stoi(inputs.at(input));
	} else if (direction == "up") {
	  state->aim -= stoi(inputs.at(input));
	}
      }
    }
  }
}


int main(int argc, char** argv) {
  string input;
  vector<string> inputs;

  if (argc < 2) {
    cout << "Path to input file required.\n";
    return EXIT_FAILURE;
  }

  input = argv[1];

  inputs = read_file_string(input);
  int num_inputs = inputs.size();

  if (num_inputs == 0)
    return EXIT_FAILURE;

  State* state = part1(inputs);
  int product = state->depth * state->disp;

  //  cout << product << "\n";

  //  part2(inputs, state);

  //  product = state->depth * state->disp;

  //  cout << product << "\n";

  return 0;
}
